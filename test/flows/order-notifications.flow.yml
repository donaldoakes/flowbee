id: Order Notifications
start: |-
  Create
  SOA Task
states:
  - name: |-
      Create
      SOA Task
    type: operation
    metadata:
      stepId: s2
      stepDisplay: x=200,y=50,w=100,h=80
      linkDisplay: type=Elbow,x=NaN,y=NaN,xs=304&396,ys=90&90
    actions:
      - functionRef:
          refName: createTask
          arguments:
            op: add
            path: /fields/System.Title
            value: ${ .orderId + " SOA" }
        actionDataFilter:
          results: '${ {soaTaskId: .id} }'
          useResults: true
    transition:
      nextState: |-
        Await
        SOA
  - name: |-
      Await
      SOA
    type: event
    metadata:
      stepId: s3
      dueInterval: 24 hours
      alertInterval: 2 hours
      stepDisplay: x=400,y=50,w=100,h=80
      linkDisplay: type=Elbow,x=NaN,y=NaN,xs=450&450,ys=134&196
    onEvents:
      - eventRefs:
          - ServiceOrderAcknowledgment
    transition:
      nextState: |-
        Close
        SOA Task
  - name: |-
      Close
      SOA Task
    type: operation
    metadata:
      stepId: s4
      stepDisplay: x=400,y=200,w=100,h=80
      linkDisplay: type=Elbow,x=NaN,y=NaN,xs=396&250,ys=240&356
    actions:
      - functionRef:
          refName: updateTask
          arguments:
            id: ${ .soaTaskId }
            op: replace
            path: /fields/System.State
            value: Done
        actionDataFilter:
          results: '${ {soaTaskState: .fields["System.State"]} }'
          useResults: true
    transition:
      nextState: |-
        Create
        SOC Task
  - name: |-
      Create
      SOC Task
    type: operation
    metadata:
      stepId: s5
      stepDisplay: x=200,y=360,w=100,h=80
      linkDisplay: type=Elbow,x=NaN,y=NaN,xs=304&396,ys=400&400
    actions:
      - functionRef:
          refName: createTask
          arguments:
            op: add
            path: /fields/System.Title
            value: ${ .orderId + " SOC" }
        actionDataFilter:
          results: '${ {socTaskId: .id} }'
          useResults: true
    transition:
      nextState: |-
        Await
        SOC
  - name: |-
      Await
      SOC
    type: event
    metadata:
      stepId: s6
      dueInterval: 5 days
      alertInterval: 24 hours
      stepDisplay: x=400,y=360,w=100,h=80
      linkDisplay: type=Elbow,x=NaN,y=NaN,xs=450&450,ys=444&516
    onEvents:
      - eventRefs:
          - ServiceOrderConfirmation
    transition:
      nextState: |-
        Close
        SOC Task
  - name: |-
      Close
      SOC Task
    type: operation
    metadata:
      stepId: s7
      stepDisplay: x=400,y=520,w=100,h=80
      linkDisplay: type=Elbow,x=NaN,y=NaN,xs=504&586,ys=560&560
      stopStepId: s8
      stopStepDisplay: x=590,y=540,w=60,h=40
    actions:
      - functionRef:
          refName: updateTask
          arguments:
            id: ${ .socTaskId }
            op: replace
            path: /fields/System.State
            value: Done
        actionDataFilter:
          results: '${ {socTaskState: .fields["System.State"]} }'
          useResults: true
    end: true
version: '1.0'
name: Order Notifications
metadata:
  startStepId: s1
  startStepDisplay: x=60,y=70,w=60,h=40
  startLinkDisplay: type=Elbow,x=NaN,y=NaN,xs=124&196,ys=90&90
  stepDisplay: x=400,y=520,w=100,h=80
functions:
  - name: createTask
    type: rest
    operation: openapi/azure-tasks.yaml#createTask
  - name: updateTask
    type: rest
    operation: openapi/azure-tasks.yaml#updateTask
events:
  - name: ServiceOrderAcknowledgment
    type: order.notifications
    source: eis.lumen.com
    correlation:
      - contextAttributeName: orderId
  - name: ServiceOrderConfirmation
    type: order.notifications
    source: eis.lumen.com
    correlation:
      - contextAttributeName: orderId
  - name: SOCN
    type: order.notifications
    source: eis.lumen.com
    correlation:
      - contextAttributeName: orderId
    metadata:
      dueInterval: 30 business days
      alertInterval: 48 hours
